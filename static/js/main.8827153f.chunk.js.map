{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","ref","useRef","useState","edit","value","input","setInput","useEffect","current","focus","changeHandler","e","target","className","onSubmit","preventDefault","onFormEdit","id","text","Math","floor","random","Fragment","placeholder","type","name","onChange","maxLength","Todo","setEdit","completehandler","onComplete","deleteHandler","onDelete","editHandler","todo","onEdit","todos","map","index","isComplete","onClick","bind","TodoList","key","savedList","JSON","parse","localStorage","getItem","setTodos","newTodos","setItem","stringify","updatedArr","removedArr","filter","newTodo","prev","updateTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA2EeA,EAzEE,SAACC,GAChB,IAAMC,EAAMC,mBADc,EAEAC,mBAASH,EAAMI,KAAOJ,EAAMI,KAAKC,MAAQ,IAFzC,mBAEnBC,EAFmB,KAEZC,EAFY,KAI1BC,qBAAU,WAERP,EAAIQ,QAAQC,UACX,IAEH,IAAMC,EAAgB,SAACC,GACrBL,EAASK,EAAEC,OAAOR,QAyBpB,OACE,sBACES,UAAU,YACVC,SAAUf,EAAMI,KAdM,SAACQ,GACzBA,EAAEI,iBAEFhB,EAAMiB,WAAW,CACfC,GAAIlB,EAAMI,KAAKc,GACfC,KAAMb,IAGRC,EAAS,KAnBW,SAACK,GACrBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACbG,GAAIE,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBH,KAAMb,IAGRC,EAAS,KAeT,SAIGP,EAAMI,KACL,eAAC,IAAMmB,SAAP,WACE,uBACEtB,IAAKA,EACLuB,YAAY,wBACZC,KAAK,OACLC,KAAK,OACLZ,UAAU,kBACVT,MAAOC,EACPqB,SAAUhB,EACViB,UAAU,OAEZ,wBAAQd,UAAU,mBAAlB,uBAGF,eAAC,IAAMS,SAAP,WACE,uBACEtB,IAAKA,EACLuB,YAAY,aACZC,KAAK,OACLC,KAAK,OACLZ,UAAU,aACVT,MAAOC,EACPqB,SAAUhB,EACViB,UAAU,OAEZ,wBAAQd,UAAU,cAAlB,4BCKKe,EAnEF,SAAC7B,GAAW,IAAD,EACEG,mBAAS,CAC/Be,GAAI,KACJb,MAAO,KAHa,mBACfD,EADe,KACT0B,EADS,KAMhBC,EAAkB,SAACb,GACvBlB,EAAMgC,WAAWd,IAGbe,EAAgB,SAACf,GACrBlB,EAAMkC,SAAShB,IAGXiB,EAAc,SAACjB,EAAIC,GACvBW,EAAQ,CACNZ,KACAb,MAAOc,KAcX,OAAIf,EAAKc,GACA,cAAC,EAAD,CAAUd,KAAMA,EAAMa,WAXP,SAACmB,GACvBpC,EAAMqC,OAAOD,GAEbN,EAAQ,CACNZ,GAAI,KACJb,MAAO,QAUT,cAAC,IAAMkB,SAAP,UACGvB,EAAMsC,MAAMC,KAAI,SAACH,EAAMI,GACtB,OACE,sBAEE1B,UAAWsB,EAAKK,WAAa,oBAAsB,WAFrD,UAIE,qBAEE3B,UAAU,OACV4B,QAASX,EAAgBY,KAAK,KAAMP,EAAKlB,IAH3C,SAKGkB,EAAKjB,MAJDiB,EAAKlB,IAMZ,sBAAKJ,UAAU,QAAf,UACE,cAAC,IAAD,CACEA,UAAU,cACV4B,QAAST,EAAcU,KAAK,KAAMP,EAAKlB,MAEzC,cAAC,IAAD,CACEJ,UAAU,YACV4B,QAASP,EAAYQ,KAAK,KAAMP,EAAKlB,GAAIkB,EAAKjB,aAjB7CqB,SCqBFI,EA9DE,SAAC5C,GAChB,IAAM6C,EAAM,WACNC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQL,IAFxB,EAGA1C,mBAAS2C,GAAwB,IAHjC,mBAGnBR,EAHmB,KAGZa,EAHY,KAgD1B,OACE,eAAC,IAAM5B,SAAP,WACE,4DACA,cAAC,EAAD,CAAUR,SA9CE,SAACqB,GAEf,GAAKA,EAAKjB,KAAV,CAEA,IAAMiC,EAAQ,CAAIhB,GAAJ,mBAAaE,IAC3BW,aAAaI,QAAQR,EAAKE,KAAKO,UAAUF,IACzCD,EAASC,OAyCP,cAAC,EAAD,CACEd,MAAOA,EACPN,WAxCoB,SAACd,GACzB,IAAIqC,EAAajB,EAAMC,KAAI,SAACH,GAK1B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKK,YAAcL,EAAKK,YAEnBL,KAGTa,aAAaI,QAAQR,EAAKE,KAAKO,UAAUC,IACzCJ,EAASI,IA+BLrB,SA5BkB,SAAChB,GACvB,IAAMsC,EAAa,YAAIlB,GAAOmB,QAAO,SAACrB,GAAD,OAAUA,EAAKlB,KAAOA,KAC3D+B,aAAaI,QAAQR,EAAKE,KAAKO,UAAUE,IACzCL,EAASK,IA0BLnB,OAvBgB,SAACqB,GAChBA,EAAQvC,MAKbgC,GAAS,SAACQ,GACR,IAAMC,EAAcD,EAAKpB,KAAI,SAACH,GAC5B,OAAOA,EAAKlB,KAAOwC,EAAQxC,GAAKwC,EAAUtB,KAG5C,OADAa,aAAaI,QAAQR,EAAKE,KAAKO,UAAUM,IAClCA,YCtCEC,MARf,WACE,OACE,qBAAK/C,UAAU,WAAf,SACE,cAAC,EAAD,OCMSgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8827153f.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst TodoForm = (props) => {\r\n  const ref = useRef();\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n  useEffect(() => {\r\n    // to implete the function that focus input when init the website\r\n    ref.current.focus();\r\n  }, []);\r\n\r\n  const changeHandler = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n\r\n    setInput('');\r\n  };\r\n\r\n  const editsubmitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onFormEdit({\r\n      id: props.edit.id,\r\n      text: input,\r\n    });\r\n\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"todo-form\"\r\n      onSubmit={props.edit ? editsubmitHandler : submitHandler}\r\n    >\r\n      {props.edit ? (\r\n        <React.Fragment>\r\n          <input\r\n            ref={ref}\r\n            placeholder=\"Update your todo item\"\r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"todo-input edit\"\r\n            value={input}\r\n            onChange={changeHandler}\r\n            maxLength=\"15\"\r\n          />\r\n          <button className=\"todo-button edit\">Update</button>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <input\r\n            ref={ref}\r\n            placeholder=\"Add a todo\"\r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            value={input}\r\n            onChange={changeHandler}\r\n            maxLength=\"15\"\r\n          />\r\n          <button className=\"todo-button\">Add todo</button>\r\n        </React.Fragment>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nconst Todo = (props) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: '',\r\n  });\r\n\r\n  const completehandler = (id) => {\r\n    props.onComplete(id);\r\n  };\r\n\r\n  const deleteHandler = (id) => {\r\n    props.onDelete(id);\r\n  };\r\n\r\n  const editHandler = (id, text) => {\r\n    setEdit({\r\n      id,\r\n      value: text,\r\n    });\r\n  };\r\n\r\n  const formEditHandler = (todo) => {\r\n    props.onEdit(todo);\r\n    // clean up and change the status to empty\r\n    setEdit({\r\n      id: null,\r\n      value: '',\r\n    });\r\n  };\r\n\r\n  // edit feature\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onFormEdit={formEditHandler} />;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.todos.map((todo, index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n          >\r\n            <div\r\n              key={todo.id}\r\n              className=\"text\"\r\n              onClick={completehandler.bind(null, todo.id)}\r\n            >\r\n              {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n              <RiCloseCircleLine\r\n                className=\"delete-icon\"\r\n                onClick={deleteHandler.bind(null, todo.id)}\r\n              />\r\n              <TiEdit\r\n                className=\"edit-icon\"\r\n                onClick={editHandler.bind(null, todo.id, todo.text)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\n\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\nconst TodoList = (props) => {\r\n  const key = 'todoList';\r\n  const savedList = JSON.parse(localStorage.getItem(key));\r\n  const [todos, setTodos] = useState(savedList ? savedList : []);\r\n\r\n  const addTodo = (todo) => {\r\n    // to prevent add empty string\r\n    if (!todo.text) return;\r\n\r\n    const newTodos = [todo, ...todos];\r\n    localStorage.setItem(key, JSON.stringify(newTodos));\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const onCompleteHandler = (id) => {\r\n    let updatedArr = todos.map((todo) => {\r\n      // chnage the status of todo item\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    localStorage.setItem(key, JSON.stringify(updatedArr));\r\n    setTodos(updatedArr);\r\n  };\r\n\r\n  const onDeleteHandler = (id) => {\r\n    const removedArr = [...todos].filter((todo) => todo.id !== id);\r\n    localStorage.setItem(key, JSON.stringify(removedArr));\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const onEditHandler = (newTodo) => {\r\n    if (!newTodo.text) {\r\n      return;\r\n    }\r\n\r\n    // update the todo list\r\n    setTodos((prev) => {\r\n      const updateTodos = prev.map((todo) => {\r\n        return todo.id === newTodo.id ? newTodo : todo;\r\n      });\r\n      localStorage.setItem(key, JSON.stringify(updateTodos));\r\n      return updateTodos;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1>What's the Plan for Today?</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        onComplete={onCompleteHandler}\r\n        onDelete={onDeleteHandler}\r\n        onEdit={onEditHandler}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}